1.

'[^\.\s] [A-Z].+ ' - this regex should find proper names, by finding words that start with a capital and do not come directly after punctuation.

		First, she dreamed of little Alice herself, and once again the tiny
		see'st thou that sight, oh Ahab!--shudder, shudder!"

' [Hh]e said ' and '[Ss]he said ' - He said is found 453 times versus 90 times for she said.

'(ed|ing) ' - will likely find verbs 

		 Never even for one brief hour abandoning my task,

		 


2.
A.

The fst is in unvowel.txt.

B.

1: 0/18 correct words 
2: 1/18 correct words 
3: 7/18 correct words + extra 1 word
5: 13/18 correct words + exta 1 word
7: 15/18 correct words + extra 1 word

With n=1, there are no examples of where to insert vowels, so it defaults to not inserting any because of the weights of the unvowel.fst

C.

The fst for this is squash.txt 

The way it works is that there is a transition from state 0 to 1 for all letters, a space transitions back to 0. Then for all consonants a transition from 1 back to 1. For vowels at state 1, we have to transitions, one to state 3 where the vowel is printed and one to state 3 where nothing is printed. At state 2 if we get a space, we return to the state 0. In state 3, if we get vowel we additionally transition from state 3 to 3 without printing (assuming inside of a word) and we transition to state 2 with printing (assumes end of word). All consonants lead back to state 1.

If we find a vowel, and it does not have a space following it, the path through state 2 fails. If we find a vowel and a space occurs after it, there is no transition with a space from state 3, so that path will fail.


D.

1- 7/18 words correct
2- 9/18 words correct
3- 11/18 words correct
5- 16/18 words correct 
7- 17/18 words correct

3.

The fst is composed of a bunch of smaller fsts,
 ones.txt - generates a ones place
 tens.txt - generates the teens words
 twentys.txt - generates a tens place (not including teens)
 hundreds.txt - generates the hundred string
 thousands.txt - generates the thousand string
 millions.txt - generates the million string

These are compiled and composed as follows.

fstcompile --isymbols=ascii.syms --osymbols=number.syms < ones.txt > ones.fst
fstcompile --isymbols=ascii.syms --osymbols=number.syms < tens.txt > tens.fst
fstcompile --isymbols=ascii.syms --osymbols=number.syms < twentys.txt > twentys.fst
fstcompile --isymbols=ascii.syms --osymbols=number.syms < hundreds.txt > hundreds.fst
fstcompile --isymbols=ascii.syms --osymbols=number.syms < thousands.txt > thousands.fst
fstcompile --isymbols=ascii.syms --osymbols=number.syms < millions.txt > millions.fst

fstunion ones.fst tens.fst > temp.fst
fstconcat twentys.fst ones.fst | fstunion - temp.fst > fulltens.fst
fstconcat ones.fst hundreds.fst | fstconcat - fulltens.fst | \
  fstunion - fulltens.fst > fullhundreds.fst
fstconcat ones.fst thousands.fst | fstconcat - fullhundreds.fst |\
 fstunion - fullhundreds.fst > fulltenhundreds.fst
fstconcat fulltens.fst thousands.fst | fstconcat - fullhundreds.fst | \
 fstunion - fulltenhundreds.fst > fulltenthousands.fst
fstconcat fullhundreds.fst thousands.fst | fstconcat - fullhundreds.fst | \
 fstunion - fulltenthousands.fst > fullhundredthousands.fst
fstconcat ones.fst millions.fst | fstconcat - fullhundredthousands.fst | \
 fstunion - fullhundredthousands.fst > fullmillions.fst
fstconcat fulltens.fst millions.fst | fstconcat - fullhundredthousands.fst | \
 fstunion - fullmillions.fst > fulltenmillions.fst
fstconcat fullhundreds.fst millions.fst | fstconcat - fullhundredthousands.fst | \
 fstunion - fulltenmillions.fst > fullhundredmillions.fst 

